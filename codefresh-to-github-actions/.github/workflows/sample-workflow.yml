name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  clone:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

  build:
    runs-on: ubuntu-latest
    needs: clone
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: my-org/my-app:${{ github.sha }}

  test:
    runs-on: ubuntu-latest
    needs: build
    strategy:
      matrix:
        python-version: [3.8, 3.11]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Run tests
        run: pytest tests/

  security:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run Trivy scan
        uses: aquasecurity/trivy-action@v0.11.0
        with:
          image-ref: my-org/my-app:${{ github.sha }}

      - name: Run OWASP Dependency-Check
        uses: dependency-check/scan-action@v2
        with:
          project: my-app
          scan: .

  deploy:
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy to Production
        env:
          ENVIRONMENT: production
          DEPLOY_SECRET: ${{ secrets.DEPLOY_SECRET }}
        run: |
          echo "Deploying to $ENVIRONMENT"
          # Add your deployment commands here

      - name: Send Slack notification on failure
        if: failure()
        uses: slackapi/slack-github-action@v1.23.0
        with:
          payload: |
            {
              "text": "Deployment failed for commit ${{ github.sha }} on branch ${{ github.ref_name }}."
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}